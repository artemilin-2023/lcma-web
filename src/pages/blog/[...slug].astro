---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import { render } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import AsciiBackground from '../../components/AsciiBackground.astro';
import KawaiiElements from '../../components/KawaiiElements.astro';
import ScrollProgress from '../../components/ScrollProgress.astro';
import ScrollToTop from '../../components/ScrollToTop.astro';
import SmoothScroll from '../../components/SmoothScroll.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await render(post);
const { title, description, pubDate, updatedDate, heroImage } = post.data;
---

<!DOCTYPE html>
<html lang="ru">
	<head>
		<BaseHead title={post.data.title} description={post.data.description} />
		<style is:global>
			body {
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				overflow-x: hidden;
			}
			
			.prose h2 {
				color: var(--neon-blue) !important;
				font-family: var(--font-kawaii) !important;
				margin: 1.5em 0 0.8em !important;
				font-size: 1.8rem !important;
				text-shadow: 0 0 5px var(--neon-blue) !important;
			}
			
			.prose h3 {
				color: var(--neon-pink) !important;
				font-family: var(--font-alternative) !important;
				margin: 1.2em 0 0.6em !important;
				font-size: 1.5rem !important;
				text-shadow: 0 0 3px var(--neon-pink) !important;
			}

			.prose h4 {
				color: var(--neon-purple) !important;
				font-family: var(--font-alternative) !important;
				margin: 1em 0 0.5em !important;
				font-size: 1.3rem !important;
				text-shadow: 0 0 3px var(--neon-purple) !important;
			}
			
			.prose p {
				font-family: var(--font-alternative) !important;
				margin-bottom: 1em !important;
			}
			
			.prose blockquote {
				margin: 1.5em 0 !important;
				padding: 1.2em 1.5em !important;
				border-left: 4px solid var(--neon-pink) !important;
				background: rgba(30, 0, 60, 0.6) !important;
				font-style: italic !important;
				position: relative !important;
				border-radius: 0 1rem 1rem 0 !important;
				backdrop-filter: blur(5px) !important;
				-webkit-backdrop-filter: blur(5px) !important;
				box-shadow: 0 0 15px rgba(0, 0, 0, 0.3) !important;
				font-family: var(--font-alternative) !important;
			}

			.prose blockquote::before {
				content: "❝" !important;
				position: absolute !important;
				top: -15px !important;
				left: 15px !important;
				font-size: 2em !important;
				color: var(--neon-pink) !important;
				text-shadow: 0 0 5px var(--neon-pink) !important;
			}
			
			.prose pre {
				margin: 1.5em 0 !important;
				border: 1px solid var(--neon-blue) !important;
				border-radius: 0.8rem !important;
				box-shadow: 0 0 10px rgba(0, 123, 255, 0.3) !important;
				position: relative !important;
				overflow: hidden !important; /* Скрываем выход за пределы */
				background: rgba(15, 15, 35, 0.8) !important;
			}

			/* Контейнер заголовка */
			.prose pre::before {
				content: attr(data-language) !important;
				position: absolute !important;
				top: 0 !important;
				left: 0 !important;
				font-size: 0.8em !important;
				color: var(--neon-pink) !important;
				padding: 0.3em 1em !important;
				text-transform: uppercase !important;
				font-family: var(--font-alternative) !important;
				letter-spacing: 0.05em !important;
				border-bottom: 1px solid var(--neon-pink) !important;
				border-right: 1px solid var(--neon-pink) !important;
				box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.3) !important;
				border-radius: 0.8rem 0 0.4rem 0 !important;
				width: auto !important;
				z-index: 2 !important;
				background: rgba(25, 25, 45, 0.95) !important;
			}

			/* Фон заголовка */
			.prose pre::after {
				content: "" !important;
				position: absolute !important;
				top: 0 !important;
				left: 0 !important;
				right: 0 !important;
				height: 2.0em !important;
				background: rgba(25, 25, 45, 0.95) !important;
				border-bottom: 1px solid rgba(0, 123, 255, 0.3) !important;
				border-radius: 0.8rem 0.8rem 0 0 !important;
				z-index: 1 !important;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2) !important;
			}

			/* Содержимое кода с прокруткой */
			.prose pre code {
				display: block !important;
				padding: 1.2em !important;
				padding-top: 3em !important; /* Отступ сверху для заголовка */
				margin-top: 1em !important;
				overflow-x: auto !important; /* Только содержимое кода прокручивается */
				font-family: 'JetBrains Mono', monospace !important;
				overflow-y: visible !important;
			}
			
			/* Кнопка копирования */
			.prose pre .copy-button {
				position: absolute !important;
				top: 0 !important;
				right: 0 !important;
				background: rgba(25, 25, 45, 0.95) !important;
				color: var(--neon-blue) !important;
				border: none !important;
				border-left: 1px solid var(--neon-blue) !important;
				border-bottom: 1px solid var(--neon-blue) !important;
				border-radius: 0 0.8rem 0 0.4rem !important;
				padding: 0.3em 0.8em !important;
				font-size: 0.8em !important;
				cursor: pointer !important;
				transition: all 0.2s !important;
				font-family: var(--font-alternative) !important;
				display: flex !important;
				align-items: center !important;
				gap: 0.3em !important;
				z-index: 2 !important;
			}
			
			.prose pre .copy-button:hover {
				background: rgba(30, 30, 55, 0.95) !important;
				box-shadow: 0 0 5px var(--neon-blue) !important;
			}
			
			.prose pre .copy-button.copied {
				background: rgba(0, 255, 128, 0.2) !important;
				color: white !important;
				border-color: var(--neon-green, #00ff80) !important;
			}
			
			/* Стили для скроллбара в блоках кода */
			.prose pre code::-webkit-scrollbar {
				height: 8px !important;
				background-color: rgba(15, 15, 35, 0.3) !important;
				border-radius: 0 0 0.8rem 0.8rem !important;
			}
			
			.prose pre code::-webkit-scrollbar-thumb {
				background-color: rgba(0, 123, 255, 0.5) !important;
				border-radius: 4px !important;
			}
			
			.prose pre code::-webkit-scrollbar-thumb:hover {
				background-color: rgba(0, 123, 255, 0.7) !important;
			}
			
			.prose code {
				font-family: 'JetBrains Mono', monospace !important;
				color: var(--neon-blue) !important;
				padding: 0.2em 0.4em !important;
				background: rgba(0, 0, 0, 0.3) !important;
				border-radius: 0.3rem !important;
				font-size: 0.9em !important;
				cursor: pointer !important;
				position: relative !important;
				transition: all 0.2s !important;
			}
			
			.prose code:hover {
				background: rgba(0, 123, 255, 0.2) !important;
				color: #ffffff !important;
			}
			
			.prose code::after {
				content: "Нажмите для копирования" !important;
				position: absolute !important;
				top: -25px !important;
				left: 50% !important;
				transform: translateX(-50%) !important;
				background: rgba(0, 0, 0, 0.8) !important;
				color: white !important;
				padding: 0.2em 0.6em !important;
				border-radius: 0.3rem !important;
				font-size: 0.7em !important;
				opacity: 0 !important;
				transition: opacity 0.2s !important;
				pointer-events: none !important;
				white-space: nowrap !important;
			}
			
			.prose code:hover::after {
				opacity: 1 !important;
			}
			
			.prose pre code {
				background: transparent !important;
				padding: 0 !important;
				color: #fff !important;
				cursor: text !important;
			}
			
			.prose pre code:hover {
				background: transparent !important;
				color: #fff !important;
			}
			
			.prose pre code::after {
				display: none !important;
			}
			
			.prose li {
				font-family: var(--font-alternative) !important;
			}
			
			.prose a {
				font-family: var(--font-alternative) !important;
			}
			
			.prose table th {
				font-family: var(--font-heading) !important;
			}
			
			.prose table td {
				font-family: var(--font-alternative) !important;
			}
			
			.prose .astro-code.github-dark {
				background: rgba(13, 17, 23, 0.8) !important;
				border-radius: 0.8rem !important;
				padding: 1.2em !important;
				font-family: 'JetBrains Mono', monospace !important;
				font-size: 0.9em !important;
				border: 1px solid var(--neon-blue) !important;
				box-shadow: 0 0 10px rgba(0, 123, 255, 0.3) !important;
				overflow-x: auto !important;
				margin: 1.5em 0 !important;
				position: relative !important;
			}

			.prose .astro-code.github-dark code {
				background: transparent !important;
				padding: 0 !important;
				color: #e1e4e8 !important;
				font-family: 'JetBrains Mono', monospace !important;
				text-shadow: none !important;
				cursor: text !important;
			}
			
			.prose img {
				max-width: 100% !important;
				border-radius: 0.6rem !important;
				margin: 1.5em 0 !important;
				box-shadow: 0 0 15px rgba(0, 0, 0, 0.5) !important;
				transition: transform 0.3s ease !important;
				border: 1px solid var(--neon-purple) !important;
			}

			.prose img:hover {
				transform: scale(1.03) !important;
			}
			
			.prose kbd {
				background: rgba(0, 0, 0, 0.3) !important;
				border: 1px solid var(--neon-purple) !important;
				border-radius: 0.3rem !important;
				box-shadow: 0 2px 0 var(--neon-blue) !important;
				padding: 0.2em 0.5em !important;
				font-family: 'JetBrains Mono', monospace !important;
				font-size: 0.9em !important;
				color: white !important;
				text-shadow: 0 0 2px var(--neon-blue) !important;
			}
		</style>
		<style>
			main {
				flex: 1;
				width: 90%;
				max-width: 1000px;
				margin: 0 auto;
				padding: 2rem 1rem;
			}
			
			.article-container {
				background: rgba(45, 0, 100, 0.3);
				backdrop-filter: blur(5px);
				-webkit-backdrop-filter: blur(5px);
				border-radius: 0.75rem;
				border: 2px solid var(--neon-purple);
				box-shadow: 0 0 8px var(--neon-purple), inset 0 0 8px var(--neon-purple);
				padding: 2rem;
				margin-bottom: 2rem;
			}
			
			.article-title {
				font-family: var(--font-heading);
				margin: 2rem 0 0.5rem 0;
				font-size: 2.5rem;
				color: var(--neon-blue);
				text-shadow: 0 0 8px var(--neon-blue);
				line-height: 1.2;
				text-align: center;
			}
			
			.article-container img {
				display: block;
				width: 100%;
				max-width: 720px;
				height: auto;
				margin: 0 auto 2rem auto;
				border-radius: 0.5rem;
				transition: all 0.3s ease;
				border: 1px solid var(--neon-purple);
				box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
			}
			
			.date-info {
				margin: 0.5rem 0 2rem 0;
				font-family: var(--font-alternative);
				color: var(--neon-pink);
				font-style: italic;
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				align-items: center;
				font-size: 0.95rem;
				justify-content: center;
				text-align: center;
			}
			
			.last-updated-on {
				color: var(--neon-purple);
			}
			
			@keyframes floatEmoji {
				0% {
					transform: translateY(0) rotate(0deg);
				}
				50% {
					transform: translateY(-10px) rotate(5deg);
				}
				100% {
					transform: translateY(0) rotate(0deg);
				}
			}
			
			@media (max-width: 768px) {
				.article-container {
					padding: 1.5rem;
				}
				
				.article-title {
					font-size: 2rem;
				}
			}
			
			@media (max-width: 480px) {
				main {
					width: 95%;
					padding: 1.5rem 0.5rem;
				}
				
				.article-container {
					padding: 1rem;
				}
				
				.article-title {
					font-size: 1.8rem;
				}
				
				.date-info {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.5rem;
				}
			}

			.prose {
				width: 100%;
				max-width: 720px;
				margin: auto;
				padding: 1em;
				color: #fff;
				font-family: var(--font-alternative);
				font-size: 1.1rem;
				line-height: 1.8;
				position: relative;
			}

			.prose::before {
				content: "";
				display: block;
				height: 2px;
				width: 90%;
				margin: 0 auto 2rem auto;
				background: var(--neon-purple);
				box-shadow: 0 0 8px var(--neon-purple);
			}

			.prose p {
				margin-bottom: 1em;
			}

			.prose a {
				color: var(--neon-pink);
				text-decoration: none;
				border-bottom: 1px solid var(--neon-pink);
				transition: all 0.2s ease;
				text-shadow: 0 0 3px var(--neon-pink);
			}

			.prose a:hover {
				color: #fff;
				border-bottom-color: #fff;
				text-shadow: 0 0 8px var(--neon-pink);
			}

			.prose ul, .prose ol {
				margin: 1em 0 1em 1.5em;
			}

			.prose li {
				margin-bottom: 0.5em;
			}

			.prose img {
				max-width: 100%;
				border-radius: 5px;
				margin: 1.5em 0;
				box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
				transition: transform 0.3s ease;
			}

			.prose img:hover {
				transform: scale(1.02);
			}

			.prose table {
				width: 100%;
				border-collapse: collapse;
				margin: 1.5em 0;
				overflow-x: auto;
				display: block;
			}

			.prose table th {
				background: rgba(45, 0, 100, 0.5);
				color: var(--neon-blue);
				text-shadow: 0 0 3px var(--neon-blue);
				font-weight: bold;
				padding: 0.8em;
				text-align: left;
				border-bottom: 2px solid var(--neon-purple);
			}

			.prose table td {
				padding: 0.8em;
				border-bottom: 1px solid rgba(138, 43, 226, 0.3);
				background: rgba(45, 0, 100, 0.2);
			}

			.prose table tr:hover td {
				background: rgba(45, 0, 100, 0.4);
			}

			.prose hr {
				border: 0;
				height: 1px;
				background: var(--neon-purple);
				margin: 2rem 0;
				box-shadow: 0 0 5px var(--neon-purple);
			}

			.prose details {
				margin: 1.5em 0;
				padding: 0.5em 1em;
				background: rgba(45, 0, 100, 0.3);
				border-radius: 0.5rem;
				border: 1px solid var(--neon-purple);
			}

			.prose details summary {
				cursor: pointer;
				font-weight: bold;
				color: var(--neon-pink);
				padding: 0.5em 0;
			}

			.prose details[open] {
				padding-bottom: 1em;
				box-shadow: 0 0 8px var(--neon-purple);
			}

			.prose mark {
				background: rgba(255, 105, 180, 0.3);
				color: white;
				padding: 0.1em 0.3em;
				border-radius: 3px;
			}

			/* Подсветка синтаксиса кода */
			.prose .code-highlight {
				color: var(--neon-pink);
			}

			.prose .code-comment {
				color: rgba(255, 255, 255, 0.5);
				font-style: italic;
			}

			.prose .code-keyword {
				color: #ff79c6;
				font-weight: bold;
			}

			.prose .code-function {
				color: #50fa7b;
			}

			.prose .code-string {
				color: #f1fa8c;
			}

			.prose .code-number {
				color: #bd93f9;
			}

			/* Адаптивность */
			@media (max-width: 768px) {
				.prose h2 {
					font-size: 1.6rem;
				}
				
				.prose h3 {
					font-size: 1.3rem;
				}
				
				.prose h4 {
					font-size: 1.1rem;
				}
				
				.prose blockquote {
					padding: 0.6em 0.8em;
					margin: 1.2em 0;
				}
				
				.prose pre code {
					padding: 0.8em !important;
					padding-top: 2.8em !important;
				}
				
				.prose pre::after {
					height: 2.1em !important;
				}
				
				.prose pre .copy-button {
					font-size: 0.7em !important;
					padding: 0.3em 0.5em !important;
				}
				
				.prose pre::before {
					font-size: 0.7em !important;
					padding: 0.3em 0.7em !important;
				}
			}

			@media (max-width: 480px) {
				.prose h2 {
					font-size: 1.4rem;
				}
				
				.prose h3 {
					font-size: 1.2rem;
				}
				
				.prose h4 {
					font-size: 1rem;
				}
				
				.prose code {
					font-size: 0.8em;
				}
				
				.prose pre code {
					padding: 0.6em !important;
					padding-top: 2.5em !important;
				}
				
				.prose pre .copy-button {
					padding: 0.2em 0.4em !important;
					font-size: 0.65em !important;
				}
				
				.prose pre::after {
					height: 2em !important;
				}
				
				.prose pre::before {
					font-size: 0.65em !important;
					padding: 0.2em 0.5em !important;
				}
				
				.prose table th,
				.prose table td {
					padding: 0.5em;
				}
			}
		</style>
		<script>
			// Функция для копирования кода при клике
			document.addEventListener('DOMContentLoaded', () => {
				// Находим все элементы code, которые не находятся внутри pre
				const codeTags = Array.from(document.querySelectorAll('.prose code')).filter(code => {
					const parent = code.parentElement;
					return parent && parent.tagName.toLowerCase() !== 'pre';
				});
				
				codeTags.forEach(code => {
					code.addEventListener('click', async () => {
						const text = code.textContent || '';
						try {
							await navigator.clipboard.writeText(text);
							
							// Визуальное подтверждение копирования
							const originalColor = window.getComputedStyle(code).color;
							const originalBg = window.getComputedStyle(code).backgroundColor;
							
							code.setAttribute('data-original-style', 'true');
							(code as HTMLElement).style.setProperty('color', 'white');
							(code as HTMLElement).style.setProperty('background', 'rgba(0, 255, 128, 0.3)');
							(code as HTMLElement).style.setProperty('border', '1px solid var(--neon-green, #00ff80)');
							
							// Показываем сообщение о копировании
							const message = document.createElement('div');
							message.textContent = 'Скопировано!';
							(message as HTMLElement).style.position = 'fixed';
							(message as HTMLElement).style.top = '20px';
							(message as HTMLElement).style.left = '50%';
							(message as HTMLElement).style.transform = 'translateX(-50%)';
							(message as HTMLElement).style.padding = '0.5em 1em';
							(message as HTMLElement).style.background = 'rgba(0, 0, 0, 0.8)';
							(message as HTMLElement).style.color = 'white';
							(message as HTMLElement).style.borderRadius = '4px';
							(message as HTMLElement).style.zIndex = '9999';
							(message as HTMLElement).style.fontFamily = 'var(--font-alternative)';
							
							document.body.appendChild(message);
							
							// Возвращаем исходный стиль через некоторое время
							setTimeout(() => {
								if (code.hasAttribute('data-original-style')) {
									(code as HTMLElement).style.removeProperty('color');
									(code as HTMLElement).style.removeProperty('background');
									(code as HTMLElement).style.removeProperty('border');
									code.removeAttribute('data-original-style');
								}
								document.body.removeChild(message);
							}, 1500);
						} catch (err) {
							console.error('Не удалось скопировать текст: ', err);
						}
					});
				});
				
				// Обработка многострочных блоков кода
				const preBlocks = document.querySelectorAll('.prose pre');
				preBlocks.forEach(pre => {
					// Определяем язык кода
					// let language = 'code';
					const codeElement = pre.querySelector('code');
					// if (codeElement) {
					// 	// Ищем класс, который указывает на язык
					// 	const classes = Array.from(codeElement.classList);
					// 	const langClass = classes.find(cls => cls.startsWith('language-'));
					// 	if (langClass) {
					// 		language = langClass.replace('language-', '');
					// 	}
					// }
					
					// Устанавливаем атрибут с языком для отображения в ::before
					// pre.setAttribute('data-language', language);
					
					// Создаем кнопку копирования
					const copyButton = document.createElement('button');
					copyButton.className = 'copy-button';
					copyButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg> Копировать';
					
					// Добавляем кнопку в блок pre
					pre.appendChild(copyButton);
					
					// Обработчик копирования
					copyButton.addEventListener('click', async () => {
						const codeText = codeElement ? (codeElement.textContent || '') : '';
						try {
							await navigator.clipboard.writeText(codeText);
							
							// Визуальное подтверждение
							copyButton.classList.add('copied');
							copyButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Скопировано!';
							
							setTimeout(() => {
								copyButton.classList.remove('copied');
								copyButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg> Копировать';
							}, 1500);
						} catch (err) {
							console.error('Не удалось скопировать код:', err);
						}
					});
				});
			});
		</script>
	</head>
	<body class="kawaii-container">
		<KawaiiElements />
		<AsciiBackground count={6} mobileCount={4} />
		<ScrollProgress />
		<Header />
		<main>			
			<article class="article-container">
				{heroImage && <img width={720} height={360} src={heroImage} alt="" />}
				<h1 class="article-title">{title}</h1>
				<div class="date-info">
					<FormattedDate date={pubDate} />
					{
						updatedDate && (
							<div class="last-updated-on">
								Обновлено <FormattedDate date={updatedDate} />
							</div>
						)
					}
				</div>
				<div class="prose">
					<Content />
				</div>
			</article>
		</main>
		<Footer />
		<ScrollToTop />
		<SmoothScroll />
	</body>
</html>
